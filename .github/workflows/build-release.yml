name: Release build

on:
  # manually run
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            host: macos-latest
            clang: yes
          - target: x86_64-apple-darwin
            host: macos-latest
            clang: yes

          - target: x86_64-pc-windows
            host: ubuntu-latest
            gcc-package-suffix: mingw-w64-x86-64-win32
            gcc-prefix: x86_64-w64-mingw32
            gcc-suffix: -win32
          - target: i686-pc-windows
            host: ubuntu-latest
            gcc-package-suffix: mingw-w64-i686-win32
            gcc-prefix: i686-w64-mingw32
            gcc-suffix: -win32

          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest
            alt-arch: arm64
            gcc-package-suffix: aarch64-linux-gnu
            gcc-prefix: aarch64-linux-gnu

    runs-on: ${{matrix.host}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        shell: bash
        run: |
          export CFLAGS='-O2 -pipe -flto'
          if [ -n "${{matrix.clang}}" ]; then
              export CFLAGS="${CFLAGS} --target=${{matrix.target}}"
          fi
          export CXXFLAGS="${CFLAGS}"

          if [ -n "${{matrix.gcc-package-suffix}}" ]; then
              sudo apt install g++-${{matrix.gcc-package-suffix}}
              export CC=${{matrix.gcc-prefix}}-gcc${{matrix.gcc-suffix}}
              export CXX=${{matrix.gcc-prefix}}-g++${{matrix.gcc-suffix}}
              export LD=${{matrix.gcc-prefix}}-ld${{matrix.gcc-suffix}}
          fi

          if [ -n "$(echo ${{matrix.target}} | grep linux)" ]; then
              DEPS="libx11-dev libwayland-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev"
              if [ -n "${{matrix.alt-arch}}" ]; then
                  UBUNTU_CODENAME="$(lsb_release -cs)"
                  echo "deb [arch=${{matrix.alt-arch}}] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME} main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list

                  DEPS_ALT_ARCH=""
                  for DEP in DEPS; do
                      DEPS_ALT_ARCH="${DEPS_ALT_ARCH} ${DEP}:${{matrix.alt_arch}}"
                  done
                  DEPS="${DEPS_ALT_ARCH}"

                  sudo dpkg --add-architecture ${{matrix.alt-arch}} || true
                  sudo apt update || true
              fi

              sudo apt install ${DEPS}
          fi

          CMAKEFLAGS="-DSDL_DEPS_SHARED=off -DSDL_SHARED=off -DSDL_STATIC=on"
          if [ -n "$(echo ${{matrix.target}} | grep windows)" ]; then
              CMAKEFLAGS="${CMAKEFLAGS} -DCMAKE_SYSTEM_NAME=Windows"
          fi

          mkdir build
          cd build
          cmake .. ${CMAKEFLAGS}

          make -j
